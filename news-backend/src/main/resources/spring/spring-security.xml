<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="
       http://www.springframework.org/schema/beans 
       http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
       http://www.springframework.org/schema/util 
       http://www.springframework.org/schema/util/spring-util-4.2.xsd">

    <!-- Shiro主过滤器本身功能十分强大,其强大之处就在于它支持任何基于URL路径表达式的、自定义的过滤器的执行 -->  
    <!-- Web应用中,Shiro可控制的Web请求必须经过Shiro主过滤器的拦截,Shiro对基于Spring的Web应用提供了完美的支持 --> 
	<!-- shiroFilter 与 web.xml 对应 -->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
	    <!-- Shiro的核心安全接口,这个属性是必须的 -->
		<property name="securityManager" ref="securityManager" />
		<!-- 要求登录时的链接(可根据项目的URL进行替换),非必须的属性,默认会自动寻找Web工程根目录下的"/login.jsp"页面 --> 
		<property name="loginUrl" value="/login.html" />
		<!-- 登录成功后要跳转的连接(本例中此属性用不到,因为登录成功后的处理逻辑在LoginController里硬编码为main.jsp了) -->  
		<property name="successUrl" value="/index.html" />
		<!-- 用户访问未对其授权的资源时,所显示的连接 -->  
        <!-- 若想更明显的测试此属性可以修改它的值,如unauthor.jsp,然后用[玄玉]登录后访问/admin/listUser.jsp就看见浏览器会显示unauthor.jsp -->
		<property name="unauthorizedUrl" value="/403.html" />
		<property name="filters">
			<util:map>
				<entry key="authc" value-ref="myFormAuthenticationFilter" />
				<!-- <entry key="perms" value-ref="myPermsFilter" /> -->
			</util:map>
		</property>
		<!-- Shiro连接约束配置,即过滤链的定义 -->  
        <!-- 此处可配合我的这篇文章来理解各个过滤连的作用http://blog.csdn.net/jadyer/article/details/12172839 -->  
        <!-- 下面value值的第一个'/'代表的路径是相对于HttpServletRequest.getContextPath()的值来的 -->  
        <!-- anon：它对应的过滤器里面是空的,什么都没做,这里.do和.jsp后面的*表示参数,比方说login.jsp?main这种 -->  
        <!-- authc：该过滤器下的页面必须验证后才能访问,它是Shiro内置的一个拦截器org.apache.shiro.web.filter.authc.FormAuthenticationFilter --> 
		<property name="filterChainDefinitions">
			<!-- 正则表达式匹配规则 转义字符：问号用"\\?"，等号用"\\="，AND符号用"&amp;" 例如匹配如下， /example/action.do\\?account.id\\=\d+&amp;other\\=ok=authc,su,perms[XXX] 
				表示请求地址"/example/action.do?action.id=023&other=ok"需要 authc,su 和perms过滤。 而"/example/action.do?action.id=ABC&other=ok"则不需要authc和perms过滤。 -->
			<value>
				/=anon
				/login*=authc
				/logout*=anon
				/home*=authc
				
				<!-- /css/**=anon
				/fonts/**=anon
				/img/**=anon
				/js/**=anon
				/ueditor/**=anon -->

				/ucs/sec/user/list.htm*=authc,perms[SYS_USER_LIST]
				
				#last
				/** = authc
			</value>
		</property>
	</bean>

	<!-- Shiro默认会使用Servlet容器的Session,可通过sessionMode属性来指定使用Shiro原生Session -->  
    <!-- 即<property name="sessionMode" value="native"/>,详细说明见官方文档 -->  
    <!-- 这里主要是设置自定义的单Realm应用,若有多个Realm,可使用'realms'属性代替 --> 
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="realm" ref="jdbcShiroRealm" />
	</bean>

	<!-- 权限验证 -->
	<!-- <bean id="myPermsFilter" class="com.ylink.inetpay.mp.system.shiro.MyPermissionsAuthorizationFilter" /> -->

	<!-- 登录授权认证 -->
	<bean id="myFormAuthenticationFilter" class="com.news.backend.system.shiro.MyFormAuthenticationFilter">
		<property name="usernameParam" value="j_username" />
		<property name="passwordParam" value="j_password" />
	</bean>

	<!-- 继承自AuthorizingRealm的自定义Realm,即指定Shiro验证用户登录的类为自定义的ShiroDbRealm.java -->  
	<!-- JDBC Realm -->
	<bean id="jdbcShiroRealm" class="com.news.backend.system.shiro.MyShiroRealm">
		<property name="credentialsMatcher" ref="myCredentialsMatcher" />
		<property name="cachingEnabled" value="false" />
	</bean>
	<bean id="myCredentialsMatcher" class="com.news.backend.system.shiro.MyCredentialsMatcher" />

	<!-- ehcahe缓存 -->
	<bean id="shiroCacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
		<property name="cacheManager" ref="cacheManager" />
	</bean>
	<!-- 保证实现了Shiro内部lifecycle函数的bean执行 --> 
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />
</beans>